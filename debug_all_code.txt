// netlify.toml
[build]
  command = "npm run build"
  publish = "dist"

[functions]
  directory = "server/dist"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[[redirects]]
  from = "/socket.io/*"
  to = "/.netlify/functions/server"
  status = 200

// package.json (root)
{
  "name": "parallel-stats-ban-tool",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "npm run build:client && npm run build:server",
    "build:client": "tsc && vite build",
    "build:server": "cd server && npm install && npm run build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "start": "node server/dist/index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "socket.io": "^4.7.2",
    "socket.io-client": "^4.7.2",
    "cors": "^2.8.5",
    "lucide-react": "^0.344.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.3"
  },
  "devDependencies": {
    "@types/express": "^4.17.17",
    "@types/node": "^18.15.11",
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.14",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "postcss": "^8.4.27",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.0.2",
    "vite": "^4.4.5"
  }
}

// server/package.json
{
  "name": "parallel-stats-ban-tool-server",
  "version": "1.0.0",
  "description": "Server for Parallel Stats Ban Tool",
  "main": "dist/index.js",
  "scripts": {
    "start": "node dist/index.js",
    "build": "tsc"
  },
  "dependencies": {
    "express": "^4.18.2",
    "socket.io": "^4.7.2",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "@types/express": "^4.17.17",
    "@types/node": "^18.15.11",
    "typescript": "^5.0.4"
  }
}

// server/tsconfig.json
{
  "compilerOptions": {
    "target": "es2018",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["*.ts"],
  "exclude": ["node_modules"]
}

// server/index.ts
import express from 'express';
import http from 'http';
import { Server } from "socket.io";
import cors from 'cors';

const app = express();
app.use(cors());
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const games = new Map();

io.on('connection', (socket) => {
  console.log('A user connected');

  socket.on('createGame', (gameId: string) => {
    games.set(gameId, { player1: socket.id, player2: null, player1Decks: null, player2Decks: null });
    socket.join(gameId);
    console.log(`Game created: ${gameId}`);
  });

  socket.on('joinGame', (gameId: string) => {
    const game = games.get(gameId);
    if (game && !game.player2) {
      game.player2 = socket.id;
      socket.join(gameId);
      io.to(gameId).emit('gameJoined', { player1: game.player1, player2: game.player2 });
      console.log(`Player 2 joined game: ${gameId}`);
    } else {
      socket.emit('gameError', 'Game not found or already full');
    }
  });

  socket.on('submitDecks', ({ gameId, decks, isPlayer1 }: { gameId: string, decks: string[], isPlayer1: boolean }) => {
    const game = games.get(gameId);
    if (game) {
      if (isPlayer1) {
        game.player1Decks = decks;
      } else {
        game.player2Decks = decks;
      }
      io.to(gameId).emit('decksSubmitted', { isPlayer1, decks });
      console.log(`Decks submitted for game ${gameId} by ${isPlayer1 ? 'Player 1' : 'Player 2'}`);
    }
  });

  socket.on('banDeck', ({ gameId, bannedDeck, isPlayer1 }: { gameId: string, bannedDeck: string, isPlayer1: boolean }) => {
    const game = games.get(gameId);
    if (game) {
      io.to(gameId).emit('deckBanned', { isPlayer1, bannedDeck });
      console.log(`Deck banned in game ${gameId} by ${isPlayer1 ? 'Player 1' : 'Player 2'}: ${bannedDeck}`);
    }
  });

  socket.on('disconnect', () => {
    console.log('User disconnected');
    for (const [gameId, game] of games.entries()) {
      if (game.player1 === socket.id || game.player2 === socket.id) {
        io.to(gameId).emit('playerDisconnected');
        games.delete(gameId);
        console.log(`Game ${gameId} ended due to player disconnection`);
      }
    }
  });
});

const port = process.env.PORT || 3001;
server.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

// src/App.tsx
import React from 'react'
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'
import DeckSubmission from './components/DeckSubmission'
import WaitingRoom from './components/WaitingRoom'
import BanPhase from './components/BanPhase'
import Results from './components/Results'
import { GameProvider } from './context/GameContext'
import ParallelLogo from './components/ParallelLogo'

function App() {
  return (
    <Router>
      <GameProvider>
        <div className="min-h-screen bg-gray-900 flex flex-col items-center justify-center p-4">
          <div className="w-full max-w-md">
            <div className="flex items-center justify-center mb-6">
              <ParallelLogo className="mr-2" />
              <h1 className="text-2xl font-bold text-white">Parallel Stats</h1>
            </div>
            <div className="bg-gray-800 rounded-lg shadow-lg p-6">
              <h2 className="text-xl font-bold text-center mb-6 text-white">Ban Tool</h2>
              <Routes>
                <Route path="/" element={<DeckSubmission />} />
                <Route path="/waiting/:gameId" element={<WaitingRoom />} />
                <Route path="/ban/:gameId" element={<BanPhase />} />
                <Route path="/results/:gameId" element={<Results />} />
              </Routes>
            </div>
          </div>
        </div>
      </GameProvider>
    </Router>
  )
}

export default App

// src/components/DeckSubmission.tsx
import React, { useState, useEffect } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { useGameContext } from '../context/GameContext'
import { Share2 } from 'lucide-react'

const DeckSubmission: React.FC = () => {
  const [decks, setDecks] = useState(['', '', ''])
  const {
    gameId,
    setGameId,
    isPlayer1,
    setIsPlayer1,
    createGame,
    joinGame,
    submitDecks,
  } = useGameContext()
  const navigate = useNavigate()
  const location = useLocation()
  const [shareableLink, setShareableLink] = useState('')

  useEffect(() => {
    const params = new URLSearchParams(location.search)
    const gameIdFromUrl = params.get('gameId')
    if (gameIdFromUrl) {
      setGameId(gameIdFromUrl)
      setIsPlayer1(false)
      joinGame(gameIdFromUrl)
    } else {
      createGame()
    }
  }, [location, setGameId, setIsPlayer1, createGame, joinGame])

  useEffect(() => {
    if (gameId) {
      const link = `${window.location.origin}?gameId=${gameId}`
      setShareableLink(link)
    }
  }, [gameId])

  const handleDeckChange = (index: number, value: string) => {
    const newDecks = [...decks]
    newDecks[index] = value
    setDecks(newDecks)
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (decks.every(deck => deck.trim() !== '')) {
      submitDecks(decks)
      navigate(`/waiting/${gameId}`)
    } else {
      alert('Please fill in all deck names')
    }
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(shareableLink)
    alert('Link copied to clipboard!')
  }

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold mb-4 text-white">
        {isPlayer1 ? "Player 1: Submit Your Decks" : "Player 2: Submit Your Decks"}
      </h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        {decks.map((deck, index) => (
          <input
            key={index}
            type="text"
            value={deck}
            onChange={(e) => handleDeckChange(index, e.target.value)}
            placeholder={`Deck ${index + 1}`}
            className="input w-full"
            required
          />
        ))}
        <button
          type="submit"
          className="btn btn-primary w-full"
        >
          Submit Decks
        </button>
      </form>
      {isPlayer1 && shareableLink && (
        <div className="mt-6 p-4 bg-gray-700 border border-gray-600 rounded">
          <h3 className="text-lg font-semibold mb-2 text-white">Share with Opponent</h3>
          <p className="mb-2 text-gray-300">Use this link to invite your opponent to the game:</p>
          <div className="flex items-center space-x-2">
            <input
              type="text"
              value={shareableLink}
              readOnly
              className="input flex-grow"
            />
            <button
              onClick={copyToClipboard}
              className="btn btn-secondary flex items-center"
            >
              <Share2 className="w-5 h-5 mr-1" />
              Copy
            </button>
          </div>
        </div>
      )}
    </div>
  )
}

export default DeckSubmission

// src/components/WaitingRoom.tsx
import React, { useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useGameContext } from '../context/GameContext';

const WaitingRoom: React.FC = () => {
  const { gameId } = useParams<{ gameId: string }>();
  const { 
    isPlayer1, 
    player1Ready, 
    player2Ready,
  } = useGameContext();
  const navigate = useNavigate();

  useEffect(() => {
    if (player1Ready && player2Ready) {
      navigate(`/ban/${gameId}`);
    }
  }, [gameId, player1Ready, player2Ready, navigate]);

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold mb-4 text-white">Waiting Room</h2>
      <p className="text-gray-300">
        {isPlayer1
          ? player2Ready
            ? "Player 2 has submitted their decks. Waiting to start the ban phase..."
            : "Waiting for Player 2 to submit their decks..."
          : player1Ready
          ? "Player 1 has submitted their decks. Waiting to start the ban phase..."
          : "Waiting for Player 1 to submit their decks..."}
      </p>
    </div>
  );
};

export default WaitingRoom;

// src/components/BanPhase.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useGameContext } from '../context/GameContext';

const BanPhase: React.FC = () => {
  const { gameId } = useParams<{ gameId: string }>();
  const { opponentDecks, bannedDeck, banDeck, isPlayer1 } = useGameContext();
  const [selectedDeck, setSelectedDeck] = useState<string | null>(null);
  const [isWaiting, setIsWaiting] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (bannedDeck) {
      navigate(`/results/${gameId}`);
    }
  }, [bannedDeck, gameId, navigate]);

  const handleBan = async () => {
    if (selectedDeck) {
      banDeck(selectedDeck);
      setIsWaiting(true);
    }
  };

  if (isWaiting) {
    return <div className="text-center text-white">Waiting for opponent to ban...</div>;
  }

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold text-white">Select a deck to ban:</h2>
      {opponentDecks.map((deck, index) => (
        <button
          key={index}
          onClick={() => setSelectedDeck(deck)}
          className={`w-full p-2 text-left border rounded ${
            selectedDeck === deck ? 'bg-red-900 border-red-500' : 'bg-gray-700 border-gray-600 hover:bg-gray-600'
          } text-white`}
        >
          {deck}
        </button>
      ))}
      <button
        onClick={handleBan}
        disabled={!selectedDeck}
        className="btn btn-primary w-full"
      >
        Ban Selected Deck
      </button>
    </div>
  );
};

export default BanPhase;

// src/components/Results.tsx
import React from 'react'
import { useGameContext } from '../context/GameContext'

const Results: React.FC = () => {
  const { playerDecks, opponentDecks, bannedDeck, isPlayer1 } = useGameContext()

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold text-white">Game Results</h2>
      <div>
        <h3 className="font-medium text-white">Your Decks:</h3>
        <ul className="list-disc list-inside text-gray-300">
          {playerDecks.map((deck, index) => (
            <li key={index} className={isPlayer1 ? (bannedDeck === deck ? 'line-through text-red-500' : '') : ''}>
              {deck} {isPlayer1 ? (bannedDeck === deck && '(Banned by opponent)') : ''}
            </li>
          ))}
        </ul>
      </div>
      <div>
        <h3 className="font-medium text-white">Opponent's Decks:</h3>
        <ul className="list-disc list-inside text-gray-300">
          {opponentDecks.map((deck, index) => (
            <li key={index} className={!isPlayer1 ? (bannedDeck === deck ? 'line-through text-red-500' : '') : ''}>
              {deck} {!isPlayer1 ? (bannedDeck === deck && '(Banned by opponent)') : ''}
            </li>
          ))}
        </ul>
      </div>
    </div>
  )
}

export default Results

// src/context/GameContext.tsx
import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react'
import io, { Socket } from 'socket.io-client';

interface GameContextType {
  socket: Socket | null;
  gameId: string | null;
  setGameId: (id: string) => void;
  playerDecks: string[];
  setPlayerDecks: (decks: string[]) => void;
  opponentDecks: string[];
  setOpponentDecks: (decks: string[]) => void;
  bannedDeck: string | null;
  setBannedDeck: (deck: string) => void;
  isPlayer1: boolean;
  setIsPlayer1: (isPlayer1: boolean) => void;
  player1Ready: boolean;
  setPlayer1Ready: (ready: boolean) => void;
  player2Ready: boolean;
  setPlayer2Ready: (ready: boolean) => void;
  createGame: () => void;
  joinGame: (gameId: string) => void;
  submitDecks: (decks: string[]) => void;
  banDeck: (deck: string) => void;
}

const GameContext = createContext<GameContextType | undefined>(undefined)

export const useGameContext = () => {
  const context = useContext(GameContext)
  if (!context) {
    throw new Error('useGameContext must be used within a GameProvider')
  }
  return context
}

export const GameProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [gameId, setGameId] = useState<string | null>(null)
  const [playerDecks, setPlayerDecks] = useState<string[]>([])
  const [opponentDecks, setOpponentDecks] = useState<string[]>([])
  const [bannedDeck, setBannedDeck] = useState<string | null>(null)
  const [isPlayer1, setIsPlayer1] = useState<boolean>(true)
  const [player1Ready, setPlayer1Ready] = useState<boolean>(false)
  const [player2Ready, setPlayer2Ready] = useState<boolean>(false)

  useEffect(() => {
    const newSocket = io('https://vocal-liger-3b07da.netlify.app');
    setSocket(newSocket);

    return () => {
      newSocket.disconnect();
    };
  }, []);

  const createGame = () => {
    if (socket) {
      const newGameId = 'game-' + Math.random().toString(36).substr(2, 9);
      setGameId(newGameId);
      setIsPlayer1(true);
      socket.emit('createGame', newGameId);
    }
  };

  const joinGame = (gameId: string) => {
    if (socket) {
      setGameId(gameId);
      setIsPlayer1(false);
      socket.emit('joinGame', gameId);
    }
  };

  const submitDecks = (decks: string[]) => {
    if (socket && gameId) {
      setPlayerDecks(decks);
      socket.emit('submitDecks', { gameId, decks, isPlayer1 });
    }
  };

  const banDeck = (deck: string) => {
    if (socket && gameId) {
      setBannedDeck(deck);
      socket.emit('banDeck', { gameId, bannedDeck: deck, isPlayer1 });
    }
  };

  useEffect(() => {
    if (socket) {
      socket.on('gameJoined', (data) => {
        console.log('Game joined:', data);
      });

      socket.on('decksSubmitted', ({ isPlayer1: submittedByPlayer1, decks }) => {
        if (submittedByPlayer1 !== isPlayer1) {
          setOpponentDecks(decks);
          submittedByPlayer1 ? setPlayer1Ready(true) : setPlayer2Ready(true);
        }
      });

      socket.on('deckBanned', ({ isPlayer1: bannedByPlayer1, bannedDeck }) => {
        if (bannedByPlayer1 !== isPlayer1) {
          setBannedDeck(bannedDeck);
        }
      });

      socket.on('playerDisconnected', () => {
        alert('The other player has disconnected. The game will end.');
        // Reset game state or navigate to a new game setup
      });

      socket.on('gameError', (error) => {
        console.error('Game error:', error);
        alert(error);
      });
    }
  }, [socket, isPlayer1]);

  return (
    <GameContext.Provider
      value={{
        socket,
        gameId,
        setGameId,
        playerDecks,
        setPlayerDecks,
        opponentDecks,
        setOpponentDecks,
        bannedDeck,
        setBannedDeck,
        isPlayer1,
        setIsPlayer1,
        player1Ready,
        setPlayer1Ready,
        player2Ready,
        setPlayer2Ready,
        createGame,
        joinGame,
        submitDecks,
        banDeck,
      }}
    >
      {children}
    </GameContext.Provider>
  )
}